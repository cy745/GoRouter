package com.wyjson.router.compiler;

import static javax.lang.model.element.Modifier.PROTECTED;
import static javax.lang.model.element.Modifier.PUBLIC;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.wyjson.router.annotation.ApplicationModule;

import org.apache.commons.collections4.CollectionUtils;

import java.io.IOException;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;

@AutoService(Processor.class)
@SupportedAnnotationTypes("com.wyjson.router.annotation.ApplicationModule")
public class ApplicationModuleProcessor extends AbstractProcessor {

    Filer mFiler;
    Elements elementUtils;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);
        mFiler = processingEnv.getFiler();
        elementUtils = processingEnv.getElementUtils();
    }

    @Override
    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {
        if (CollectionUtils.isEmpty(set))
            return false;

        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(ApplicationModule.class);

        if (CollectionUtils.isEmpty(elements))
            return false;

        TypeElement type_SuperApplication = elementUtils.getTypeElement("com.wyjson.module_common.application.SuperApplication");

        MethodSpec.Builder initModuleApplication = MethodSpec.methodBuilder("initModuleApplication")
                .addAnnotation(Override.class)
                .addModifiers(PROTECTED);

        for (Element element : elements) {
            ApplicationModule application = element.getAnnotation(ApplicationModule.class);
            initModuleApplication.addStatement("registerModuleApplication($T.class)", ClassName.get((TypeElement) element));
        }

//        try {
//            JavaFile.builder("com.wyjson.go_router",
//                    TypeSpec.classBuilder("MyApplicationTemp")
//                            .addModifiers(PUBLIC)
//                            .addJavadoc("DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY GOROUTER.")
//                            .addMethod(initModuleApplication.build())
//                            .superclass(ClassName.get(type_SuperApplication))
//                            .build()
//            ).build().writeTo(mFiler);
//        } catch (IOException e) {
//            throw new RuntimeException(e);
//        }

        return true;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

}
